// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/icalder/entproj/ent/artifact"
	"github.com/icalder/entproj/ent/predicate"
	"github.com/icalder/entproj/ent/repository"
	"github.com/rs/xid"
)

// ArtifactUpdate is the builder for updating Artifact entities.
type ArtifactUpdate struct {
	config
	hooks     []Hook
	mutation  *ArtifactMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ArtifactUpdate builder.
func (au *ArtifactUpdate) Where(ps ...predicate.Artifact) *ArtifactUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetDigest sets the "digest" field.
func (au *ArtifactUpdate) SetDigest(s string) *ArtifactUpdate {
	au.mutation.SetDigest(s)
	return au
}

// SetMediaType sets the "mediaType" field.
func (au *ArtifactUpdate) SetMediaType(s string) *ArtifactUpdate {
	au.mutation.SetMediaType(s)
	return au
}

// SetTags sets the "tags" field.
func (au *ArtifactUpdate) SetTags(s []string) *ArtifactUpdate {
	au.mutation.SetTags(s)
	return au
}

// AppendTags appends s to the "tags" field.
func (au *ArtifactUpdate) AppendTags(s []string) *ArtifactUpdate {
	au.mutation.AppendTags(s)
	return au
}

// ClearTags clears the value of the "tags" field.
func (au *ArtifactUpdate) ClearTags() *ArtifactUpdate {
	au.mutation.ClearTags()
	return au
}

// SetArtifactType sets the "artifactType" field.
func (au *ArtifactUpdate) SetArtifactType(s string) *ArtifactUpdate {
	au.mutation.SetArtifactType(s)
	return au
}

// SetNillableArtifactType sets the "artifactType" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableArtifactType(s *string) *ArtifactUpdate {
	if s != nil {
		au.SetArtifactType(*s)
	}
	return au
}

// ClearArtifactType clears the value of the "artifactType" field.
func (au *ArtifactUpdate) ClearArtifactType() *ArtifactUpdate {
	au.mutation.ClearArtifactType()
	return au
}

// SetLastPush sets the "lastPush" field.
func (au *ArtifactUpdate) SetLastPush(t time.Time) *ArtifactUpdate {
	au.mutation.SetLastPush(t)
	return au
}

// SetNillableLastPush sets the "lastPush" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableLastPush(t *time.Time) *ArtifactUpdate {
	if t != nil {
		au.SetLastPush(*t)
	}
	return au
}

// ClearLastPush clears the value of the "lastPush" field.
func (au *ArtifactUpdate) ClearLastPush() *ArtifactUpdate {
	au.mutation.ClearLastPush()
	return au
}

// SetLastPull sets the "lastPull" field.
func (au *ArtifactUpdate) SetLastPull(t time.Time) *ArtifactUpdate {
	au.mutation.SetLastPull(t)
	return au
}

// SetNillableLastPull sets the "lastPull" field if the given value is not nil.
func (au *ArtifactUpdate) SetNillableLastPull(t *time.Time) *ArtifactUpdate {
	if t != nil {
		au.SetLastPull(*t)
	}
	return au
}

// ClearLastPull clears the value of the "lastPull" field.
func (au *ArtifactUpdate) ClearLastPull() *ArtifactUpdate {
	au.mutation.ClearLastPull()
	return au
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (au *ArtifactUpdate) SetRepositoryID(id xid.ID) *ArtifactUpdate {
	au.mutation.SetRepositoryID(id)
	return au
}

// SetRepository sets the "repository" edge to the Repository entity.
func (au *ArtifactUpdate) SetRepository(r *Repository) *ArtifactUpdate {
	return au.SetRepositoryID(r.ID)
}

// SetParentID sets the "parent" edge to the Artifact entity by ID.
func (au *ArtifactUpdate) SetParentID(id xid.ID) *ArtifactUpdate {
	au.mutation.SetParentID(id)
	return au
}

// SetNillableParentID sets the "parent" edge to the Artifact entity by ID if the given value is not nil.
func (au *ArtifactUpdate) SetNillableParentID(id *xid.ID) *ArtifactUpdate {
	if id != nil {
		au = au.SetParentID(*id)
	}
	return au
}

// SetParent sets the "parent" edge to the Artifact entity.
func (au *ArtifactUpdate) SetParent(a *Artifact) *ArtifactUpdate {
	return au.SetParentID(a.ID)
}

// AddChildIDs adds the "children" edge to the Artifact entity by IDs.
func (au *ArtifactUpdate) AddChildIDs(ids ...xid.ID) *ArtifactUpdate {
	au.mutation.AddChildIDs(ids...)
	return au
}

// AddChildren adds the "children" edges to the Artifact entity.
func (au *ArtifactUpdate) AddChildren(a ...*Artifact) *ArtifactUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddChildIDs(ids...)
}

// Mutation returns the ArtifactMutation object of the builder.
func (au *ArtifactUpdate) Mutation() *ArtifactMutation {
	return au.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (au *ArtifactUpdate) ClearRepository() *ArtifactUpdate {
	au.mutation.ClearRepository()
	return au
}

// ClearParent clears the "parent" edge to the Artifact entity.
func (au *ArtifactUpdate) ClearParent() *ArtifactUpdate {
	au.mutation.ClearParent()
	return au
}

// ClearChildren clears all "children" edges to the Artifact entity.
func (au *ArtifactUpdate) ClearChildren() *ArtifactUpdate {
	au.mutation.ClearChildren()
	return au
}

// RemoveChildIDs removes the "children" edge to Artifact entities by IDs.
func (au *ArtifactUpdate) RemoveChildIDs(ids ...xid.ID) *ArtifactUpdate {
	au.mutation.RemoveChildIDs(ids...)
	return au
}

// RemoveChildren removes "children" edges to Artifact entities.
func (au *ArtifactUpdate) RemoveChildren(a ...*Artifact) *ArtifactUpdate {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArtifactUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArtifactUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArtifactUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArtifactUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ArtifactUpdate) check() error {
	if v, ok := au.mutation.Digest(); ok {
		if err := artifact.DigestValidator(v); err != nil {
			return &ValidationError{Name: "digest", err: fmt.Errorf(`ent: validator failed for field "Artifact.digest": %w`, err)}
		}
	}
	if v, ok := au.mutation.MediaType(); ok {
		if err := artifact.MediaTypeValidator(v); err != nil {
			return &ValidationError{Name: "mediaType", err: fmt.Errorf(`ent: validator failed for field "Artifact.mediaType": %w`, err)}
		}
	}
	if _, ok := au.mutation.RepositoryID(); au.mutation.RepositoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Artifact.repository"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *ArtifactUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ArtifactUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *ArtifactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(artifact.Table, artifact.Columns, sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Digest(); ok {
		_spec.SetField(artifact.FieldDigest, field.TypeString, value)
	}
	if value, ok := au.mutation.MediaType(); ok {
		_spec.SetField(artifact.FieldMediaType, field.TypeString, value)
	}
	if value, ok := au.mutation.Tags(); ok {
		_spec.SetField(artifact.FieldTags, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, artifact.FieldTags, value)
		})
	}
	if au.mutation.TagsCleared() {
		_spec.ClearField(artifact.FieldTags, field.TypeJSON)
	}
	if value, ok := au.mutation.ArtifactType(); ok {
		_spec.SetField(artifact.FieldArtifactType, field.TypeString, value)
	}
	if au.mutation.ArtifactTypeCleared() {
		_spec.ClearField(artifact.FieldArtifactType, field.TypeString)
	}
	if value, ok := au.mutation.LastPush(); ok {
		_spec.SetField(artifact.FieldLastPush, field.TypeTime, value)
	}
	if au.mutation.LastPushCleared() {
		_spec.ClearField(artifact.FieldLastPush, field.TypeTime)
	}
	if value, ok := au.mutation.LastPull(); ok {
		_spec.SetField(artifact.FieldLastPull, field.TypeTime, value)
	}
	if au.mutation.LastPullCleared() {
		_spec.ClearField(artifact.FieldLastPull, field.TypeTime)
	}
	if au.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.RepositoryTable,
			Columns: []string{artifact.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.RepositoryTable,
			Columns: []string{artifact.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.ParentTable,
			Columns: []string{artifact.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.ParentTable,
			Columns: []string{artifact.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifact.ChildrenTable,
			Columns: []string{artifact.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !au.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifact.ChildrenTable,
			Columns: []string{artifact.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifact.ChildrenTable,
			Columns: []string{artifact.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ArtifactUpdateOne is the builder for updating a single Artifact entity.
type ArtifactUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ArtifactMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDigest sets the "digest" field.
func (auo *ArtifactUpdateOne) SetDigest(s string) *ArtifactUpdateOne {
	auo.mutation.SetDigest(s)
	return auo
}

// SetMediaType sets the "mediaType" field.
func (auo *ArtifactUpdateOne) SetMediaType(s string) *ArtifactUpdateOne {
	auo.mutation.SetMediaType(s)
	return auo
}

// SetTags sets the "tags" field.
func (auo *ArtifactUpdateOne) SetTags(s []string) *ArtifactUpdateOne {
	auo.mutation.SetTags(s)
	return auo
}

// AppendTags appends s to the "tags" field.
func (auo *ArtifactUpdateOne) AppendTags(s []string) *ArtifactUpdateOne {
	auo.mutation.AppendTags(s)
	return auo
}

// ClearTags clears the value of the "tags" field.
func (auo *ArtifactUpdateOne) ClearTags() *ArtifactUpdateOne {
	auo.mutation.ClearTags()
	return auo
}

// SetArtifactType sets the "artifactType" field.
func (auo *ArtifactUpdateOne) SetArtifactType(s string) *ArtifactUpdateOne {
	auo.mutation.SetArtifactType(s)
	return auo
}

// SetNillableArtifactType sets the "artifactType" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableArtifactType(s *string) *ArtifactUpdateOne {
	if s != nil {
		auo.SetArtifactType(*s)
	}
	return auo
}

// ClearArtifactType clears the value of the "artifactType" field.
func (auo *ArtifactUpdateOne) ClearArtifactType() *ArtifactUpdateOne {
	auo.mutation.ClearArtifactType()
	return auo
}

// SetLastPush sets the "lastPush" field.
func (auo *ArtifactUpdateOne) SetLastPush(t time.Time) *ArtifactUpdateOne {
	auo.mutation.SetLastPush(t)
	return auo
}

// SetNillableLastPush sets the "lastPush" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableLastPush(t *time.Time) *ArtifactUpdateOne {
	if t != nil {
		auo.SetLastPush(*t)
	}
	return auo
}

// ClearLastPush clears the value of the "lastPush" field.
func (auo *ArtifactUpdateOne) ClearLastPush() *ArtifactUpdateOne {
	auo.mutation.ClearLastPush()
	return auo
}

// SetLastPull sets the "lastPull" field.
func (auo *ArtifactUpdateOne) SetLastPull(t time.Time) *ArtifactUpdateOne {
	auo.mutation.SetLastPull(t)
	return auo
}

// SetNillableLastPull sets the "lastPull" field if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableLastPull(t *time.Time) *ArtifactUpdateOne {
	if t != nil {
		auo.SetLastPull(*t)
	}
	return auo
}

// ClearLastPull clears the value of the "lastPull" field.
func (auo *ArtifactUpdateOne) ClearLastPull() *ArtifactUpdateOne {
	auo.mutation.ClearLastPull()
	return auo
}

// SetRepositoryID sets the "repository" edge to the Repository entity by ID.
func (auo *ArtifactUpdateOne) SetRepositoryID(id xid.ID) *ArtifactUpdateOne {
	auo.mutation.SetRepositoryID(id)
	return auo
}

// SetRepository sets the "repository" edge to the Repository entity.
func (auo *ArtifactUpdateOne) SetRepository(r *Repository) *ArtifactUpdateOne {
	return auo.SetRepositoryID(r.ID)
}

// SetParentID sets the "parent" edge to the Artifact entity by ID.
func (auo *ArtifactUpdateOne) SetParentID(id xid.ID) *ArtifactUpdateOne {
	auo.mutation.SetParentID(id)
	return auo
}

// SetNillableParentID sets the "parent" edge to the Artifact entity by ID if the given value is not nil.
func (auo *ArtifactUpdateOne) SetNillableParentID(id *xid.ID) *ArtifactUpdateOne {
	if id != nil {
		auo = auo.SetParentID(*id)
	}
	return auo
}

// SetParent sets the "parent" edge to the Artifact entity.
func (auo *ArtifactUpdateOne) SetParent(a *Artifact) *ArtifactUpdateOne {
	return auo.SetParentID(a.ID)
}

// AddChildIDs adds the "children" edge to the Artifact entity by IDs.
func (auo *ArtifactUpdateOne) AddChildIDs(ids ...xid.ID) *ArtifactUpdateOne {
	auo.mutation.AddChildIDs(ids...)
	return auo
}

// AddChildren adds the "children" edges to the Artifact entity.
func (auo *ArtifactUpdateOne) AddChildren(a ...*Artifact) *ArtifactUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddChildIDs(ids...)
}

// Mutation returns the ArtifactMutation object of the builder.
func (auo *ArtifactUpdateOne) Mutation() *ArtifactMutation {
	return auo.mutation
}

// ClearRepository clears the "repository" edge to the Repository entity.
func (auo *ArtifactUpdateOne) ClearRepository() *ArtifactUpdateOne {
	auo.mutation.ClearRepository()
	return auo
}

// ClearParent clears the "parent" edge to the Artifact entity.
func (auo *ArtifactUpdateOne) ClearParent() *ArtifactUpdateOne {
	auo.mutation.ClearParent()
	return auo
}

// ClearChildren clears all "children" edges to the Artifact entity.
func (auo *ArtifactUpdateOne) ClearChildren() *ArtifactUpdateOne {
	auo.mutation.ClearChildren()
	return auo
}

// RemoveChildIDs removes the "children" edge to Artifact entities by IDs.
func (auo *ArtifactUpdateOne) RemoveChildIDs(ids ...xid.ID) *ArtifactUpdateOne {
	auo.mutation.RemoveChildIDs(ids...)
	return auo
}

// RemoveChildren removes "children" edges to Artifact entities.
func (auo *ArtifactUpdateOne) RemoveChildren(a ...*Artifact) *ArtifactUpdateOne {
	ids := make([]xid.ID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the ArtifactUpdate builder.
func (auo *ArtifactUpdateOne) Where(ps ...predicate.Artifact) *ArtifactUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArtifactUpdateOne) Select(field string, fields ...string) *ArtifactUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Artifact entity.
func (auo *ArtifactUpdateOne) Save(ctx context.Context) (*Artifact, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArtifactUpdateOne) SaveX(ctx context.Context) *Artifact {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArtifactUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArtifactUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ArtifactUpdateOne) check() error {
	if v, ok := auo.mutation.Digest(); ok {
		if err := artifact.DigestValidator(v); err != nil {
			return &ValidationError{Name: "digest", err: fmt.Errorf(`ent: validator failed for field "Artifact.digest": %w`, err)}
		}
	}
	if v, ok := auo.mutation.MediaType(); ok {
		if err := artifact.MediaTypeValidator(v); err != nil {
			return &ValidationError{Name: "mediaType", err: fmt.Errorf(`ent: validator failed for field "Artifact.mediaType": %w`, err)}
		}
	}
	if _, ok := auo.mutation.RepositoryID(); auo.mutation.RepositoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Artifact.repository"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *ArtifactUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ArtifactUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *ArtifactUpdateOne) sqlSave(ctx context.Context) (_node *Artifact, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(artifact.Table, artifact.Columns, sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Artifact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artifact.FieldID)
		for _, f := range fields {
			if !artifact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != artifact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Digest(); ok {
		_spec.SetField(artifact.FieldDigest, field.TypeString, value)
	}
	if value, ok := auo.mutation.MediaType(); ok {
		_spec.SetField(artifact.FieldMediaType, field.TypeString, value)
	}
	if value, ok := auo.mutation.Tags(); ok {
		_spec.SetField(artifact.FieldTags, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, artifact.FieldTags, value)
		})
	}
	if auo.mutation.TagsCleared() {
		_spec.ClearField(artifact.FieldTags, field.TypeJSON)
	}
	if value, ok := auo.mutation.ArtifactType(); ok {
		_spec.SetField(artifact.FieldArtifactType, field.TypeString, value)
	}
	if auo.mutation.ArtifactTypeCleared() {
		_spec.ClearField(artifact.FieldArtifactType, field.TypeString)
	}
	if value, ok := auo.mutation.LastPush(); ok {
		_spec.SetField(artifact.FieldLastPush, field.TypeTime, value)
	}
	if auo.mutation.LastPushCleared() {
		_spec.ClearField(artifact.FieldLastPush, field.TypeTime)
	}
	if value, ok := auo.mutation.LastPull(); ok {
		_spec.SetField(artifact.FieldLastPull, field.TypeTime, value)
	}
	if auo.mutation.LastPullCleared() {
		_spec.ClearField(artifact.FieldLastPull, field.TypeTime)
	}
	if auo.mutation.RepositoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.RepositoryTable,
			Columns: []string{artifact.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RepositoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.RepositoryTable,
			Columns: []string{artifact.RepositoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(repository.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.ParentTable,
			Columns: []string{artifact.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artifact.ParentTable,
			Columns: []string{artifact.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifact.ChildrenTable,
			Columns: []string{artifact.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !auo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifact.ChildrenTable,
			Columns: []string{artifact.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   artifact.ChildrenTable,
			Columns: []string{artifact.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artifact.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Artifact{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artifact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
