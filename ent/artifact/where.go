// Code generated by ent, DO NOT EDIT.

package artifact

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/icalder/entproj/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id xid.ID) predicate.Artifact {
	return predicate.Artifact(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Artifact {
	return predicate.Artifact(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Artifact {
	return predicate.Artifact(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Artifact {
	return predicate.Artifact(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Artifact {
	return predicate.Artifact(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Artifact {
	return predicate.Artifact(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Artifact {
	return predicate.Artifact(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Artifact {
	return predicate.Artifact(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Artifact {
	return predicate.Artifact(sql.FieldLTE(FieldID, id))
}

// Digest applies equality check predicate on the "digest" field. It's identical to DigestEQ.
func Digest(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldEQ(FieldDigest, v))
}

// MediaType applies equality check predicate on the "mediaType" field. It's identical to MediaTypeEQ.
func MediaType(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldEQ(FieldMediaType, v))
}

// ArtifactType applies equality check predicate on the "artifactType" field. It's identical to ArtifactTypeEQ.
func ArtifactType(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldEQ(FieldArtifactType, v))
}

// LastPush applies equality check predicate on the "lastPush" field. It's identical to LastPushEQ.
func LastPush(v time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldEQ(FieldLastPush, v))
}

// LastPull applies equality check predicate on the "lastPull" field. It's identical to LastPullEQ.
func LastPull(v time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldEQ(FieldLastPull, v))
}

// DigestEQ applies the EQ predicate on the "digest" field.
func DigestEQ(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldEQ(FieldDigest, v))
}

// DigestNEQ applies the NEQ predicate on the "digest" field.
func DigestNEQ(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldNEQ(FieldDigest, v))
}

// DigestIn applies the In predicate on the "digest" field.
func DigestIn(vs ...string) predicate.Artifact {
	return predicate.Artifact(sql.FieldIn(FieldDigest, vs...))
}

// DigestNotIn applies the NotIn predicate on the "digest" field.
func DigestNotIn(vs ...string) predicate.Artifact {
	return predicate.Artifact(sql.FieldNotIn(FieldDigest, vs...))
}

// DigestGT applies the GT predicate on the "digest" field.
func DigestGT(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldGT(FieldDigest, v))
}

// DigestGTE applies the GTE predicate on the "digest" field.
func DigestGTE(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldGTE(FieldDigest, v))
}

// DigestLT applies the LT predicate on the "digest" field.
func DigestLT(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldLT(FieldDigest, v))
}

// DigestLTE applies the LTE predicate on the "digest" field.
func DigestLTE(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldLTE(FieldDigest, v))
}

// DigestContains applies the Contains predicate on the "digest" field.
func DigestContains(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldContains(FieldDigest, v))
}

// DigestHasPrefix applies the HasPrefix predicate on the "digest" field.
func DigestHasPrefix(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldHasPrefix(FieldDigest, v))
}

// DigestHasSuffix applies the HasSuffix predicate on the "digest" field.
func DigestHasSuffix(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldHasSuffix(FieldDigest, v))
}

// DigestEqualFold applies the EqualFold predicate on the "digest" field.
func DigestEqualFold(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldEqualFold(FieldDigest, v))
}

// DigestContainsFold applies the ContainsFold predicate on the "digest" field.
func DigestContainsFold(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldContainsFold(FieldDigest, v))
}

// MediaTypeEQ applies the EQ predicate on the "mediaType" field.
func MediaTypeEQ(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldEQ(FieldMediaType, v))
}

// MediaTypeNEQ applies the NEQ predicate on the "mediaType" field.
func MediaTypeNEQ(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldNEQ(FieldMediaType, v))
}

// MediaTypeIn applies the In predicate on the "mediaType" field.
func MediaTypeIn(vs ...string) predicate.Artifact {
	return predicate.Artifact(sql.FieldIn(FieldMediaType, vs...))
}

// MediaTypeNotIn applies the NotIn predicate on the "mediaType" field.
func MediaTypeNotIn(vs ...string) predicate.Artifact {
	return predicate.Artifact(sql.FieldNotIn(FieldMediaType, vs...))
}

// MediaTypeGT applies the GT predicate on the "mediaType" field.
func MediaTypeGT(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldGT(FieldMediaType, v))
}

// MediaTypeGTE applies the GTE predicate on the "mediaType" field.
func MediaTypeGTE(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldGTE(FieldMediaType, v))
}

// MediaTypeLT applies the LT predicate on the "mediaType" field.
func MediaTypeLT(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldLT(FieldMediaType, v))
}

// MediaTypeLTE applies the LTE predicate on the "mediaType" field.
func MediaTypeLTE(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldLTE(FieldMediaType, v))
}

// MediaTypeContains applies the Contains predicate on the "mediaType" field.
func MediaTypeContains(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldContains(FieldMediaType, v))
}

// MediaTypeHasPrefix applies the HasPrefix predicate on the "mediaType" field.
func MediaTypeHasPrefix(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldHasPrefix(FieldMediaType, v))
}

// MediaTypeHasSuffix applies the HasSuffix predicate on the "mediaType" field.
func MediaTypeHasSuffix(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldHasSuffix(FieldMediaType, v))
}

// MediaTypeEqualFold applies the EqualFold predicate on the "mediaType" field.
func MediaTypeEqualFold(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldEqualFold(FieldMediaType, v))
}

// MediaTypeContainsFold applies the ContainsFold predicate on the "mediaType" field.
func MediaTypeContainsFold(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldContainsFold(FieldMediaType, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.Artifact {
	return predicate.Artifact(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.Artifact {
	return predicate.Artifact(sql.FieldNotNull(FieldTags))
}

// ArtifactTypeEQ applies the EQ predicate on the "artifactType" field.
func ArtifactTypeEQ(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldEQ(FieldArtifactType, v))
}

// ArtifactTypeNEQ applies the NEQ predicate on the "artifactType" field.
func ArtifactTypeNEQ(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldNEQ(FieldArtifactType, v))
}

// ArtifactTypeIn applies the In predicate on the "artifactType" field.
func ArtifactTypeIn(vs ...string) predicate.Artifact {
	return predicate.Artifact(sql.FieldIn(FieldArtifactType, vs...))
}

// ArtifactTypeNotIn applies the NotIn predicate on the "artifactType" field.
func ArtifactTypeNotIn(vs ...string) predicate.Artifact {
	return predicate.Artifact(sql.FieldNotIn(FieldArtifactType, vs...))
}

// ArtifactTypeGT applies the GT predicate on the "artifactType" field.
func ArtifactTypeGT(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldGT(FieldArtifactType, v))
}

// ArtifactTypeGTE applies the GTE predicate on the "artifactType" field.
func ArtifactTypeGTE(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldGTE(FieldArtifactType, v))
}

// ArtifactTypeLT applies the LT predicate on the "artifactType" field.
func ArtifactTypeLT(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldLT(FieldArtifactType, v))
}

// ArtifactTypeLTE applies the LTE predicate on the "artifactType" field.
func ArtifactTypeLTE(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldLTE(FieldArtifactType, v))
}

// ArtifactTypeContains applies the Contains predicate on the "artifactType" field.
func ArtifactTypeContains(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldContains(FieldArtifactType, v))
}

// ArtifactTypeHasPrefix applies the HasPrefix predicate on the "artifactType" field.
func ArtifactTypeHasPrefix(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldHasPrefix(FieldArtifactType, v))
}

// ArtifactTypeHasSuffix applies the HasSuffix predicate on the "artifactType" field.
func ArtifactTypeHasSuffix(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldHasSuffix(FieldArtifactType, v))
}

// ArtifactTypeIsNil applies the IsNil predicate on the "artifactType" field.
func ArtifactTypeIsNil() predicate.Artifact {
	return predicate.Artifact(sql.FieldIsNull(FieldArtifactType))
}

// ArtifactTypeNotNil applies the NotNil predicate on the "artifactType" field.
func ArtifactTypeNotNil() predicate.Artifact {
	return predicate.Artifact(sql.FieldNotNull(FieldArtifactType))
}

// ArtifactTypeEqualFold applies the EqualFold predicate on the "artifactType" field.
func ArtifactTypeEqualFold(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldEqualFold(FieldArtifactType, v))
}

// ArtifactTypeContainsFold applies the ContainsFold predicate on the "artifactType" field.
func ArtifactTypeContainsFold(v string) predicate.Artifact {
	return predicate.Artifact(sql.FieldContainsFold(FieldArtifactType, v))
}

// LastPushEQ applies the EQ predicate on the "lastPush" field.
func LastPushEQ(v time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldEQ(FieldLastPush, v))
}

// LastPushNEQ applies the NEQ predicate on the "lastPush" field.
func LastPushNEQ(v time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldNEQ(FieldLastPush, v))
}

// LastPushIn applies the In predicate on the "lastPush" field.
func LastPushIn(vs ...time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldIn(FieldLastPush, vs...))
}

// LastPushNotIn applies the NotIn predicate on the "lastPush" field.
func LastPushNotIn(vs ...time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldNotIn(FieldLastPush, vs...))
}

// LastPushGT applies the GT predicate on the "lastPush" field.
func LastPushGT(v time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldGT(FieldLastPush, v))
}

// LastPushGTE applies the GTE predicate on the "lastPush" field.
func LastPushGTE(v time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldGTE(FieldLastPush, v))
}

// LastPushLT applies the LT predicate on the "lastPush" field.
func LastPushLT(v time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldLT(FieldLastPush, v))
}

// LastPushLTE applies the LTE predicate on the "lastPush" field.
func LastPushLTE(v time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldLTE(FieldLastPush, v))
}

// LastPushIsNil applies the IsNil predicate on the "lastPush" field.
func LastPushIsNil() predicate.Artifact {
	return predicate.Artifact(sql.FieldIsNull(FieldLastPush))
}

// LastPushNotNil applies the NotNil predicate on the "lastPush" field.
func LastPushNotNil() predicate.Artifact {
	return predicate.Artifact(sql.FieldNotNull(FieldLastPush))
}

// LastPullEQ applies the EQ predicate on the "lastPull" field.
func LastPullEQ(v time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldEQ(FieldLastPull, v))
}

// LastPullNEQ applies the NEQ predicate on the "lastPull" field.
func LastPullNEQ(v time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldNEQ(FieldLastPull, v))
}

// LastPullIn applies the In predicate on the "lastPull" field.
func LastPullIn(vs ...time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldIn(FieldLastPull, vs...))
}

// LastPullNotIn applies the NotIn predicate on the "lastPull" field.
func LastPullNotIn(vs ...time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldNotIn(FieldLastPull, vs...))
}

// LastPullGT applies the GT predicate on the "lastPull" field.
func LastPullGT(v time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldGT(FieldLastPull, v))
}

// LastPullGTE applies the GTE predicate on the "lastPull" field.
func LastPullGTE(v time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldGTE(FieldLastPull, v))
}

// LastPullLT applies the LT predicate on the "lastPull" field.
func LastPullLT(v time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldLT(FieldLastPull, v))
}

// LastPullLTE applies the LTE predicate on the "lastPull" field.
func LastPullLTE(v time.Time) predicate.Artifact {
	return predicate.Artifact(sql.FieldLTE(FieldLastPull, v))
}

// LastPullIsNil applies the IsNil predicate on the "lastPull" field.
func LastPullIsNil() predicate.Artifact {
	return predicate.Artifact(sql.FieldIsNull(FieldLastPull))
}

// LastPullNotNil applies the NotNil predicate on the "lastPull" field.
func LastPullNotNil() predicate.Artifact {
	return predicate.Artifact(sql.FieldNotNull(FieldLastPull))
}

// HasRepository applies the HasEdge predicate on the "repository" edge.
func HasRepository() predicate.Artifact {
	return predicate.Artifact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RepositoryTable, RepositoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepositoryWith applies the HasEdge predicate on the "repository" edge with a given conditions (other predicates).
func HasRepositoryWith(preds ...predicate.Repository) predicate.Artifact {
	return predicate.Artifact(func(s *sql.Selector) {
		step := newRepositoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Artifact {
	return predicate.Artifact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Artifact) predicate.Artifact {
	return predicate.Artifact(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Artifact {
	return predicate.Artifact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Artifact) predicate.Artifact {
	return predicate.Artifact(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Artifact) predicate.Artifact {
	return predicate.Artifact(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Artifact) predicate.Artifact {
	return predicate.Artifact(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Artifact) predicate.Artifact {
	return predicate.Artifact(func(s *sql.Selector) {
		p(s.Not())
	})
}
