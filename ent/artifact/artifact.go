// Code generated by ent, DO NOT EDIT.

package artifact

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the artifact type in the database.
	Label = "artifact"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDigest holds the string denoting the digest field in the database.
	FieldDigest = "digest"
	// FieldMediaType holds the string denoting the mediatype field in the database.
	FieldMediaType = "media_type"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldArtifactType holds the string denoting the artifacttype field in the database.
	FieldArtifactType = "artifact_type"
	// FieldLastPush holds the string denoting the lastpush field in the database.
	FieldLastPush = "last_push"
	// FieldLastPull holds the string denoting the lastpull field in the database.
	FieldLastPull = "last_pull"
	// EdgeRepository holds the string denoting the repository edge name in mutations.
	EdgeRepository = "repository"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// Table holds the table name of the artifact in the database.
	Table = "artifacts"
	// RepositoryTable is the table that holds the repository relation/edge.
	RepositoryTable = "artifacts"
	// RepositoryInverseTable is the table name for the Repository entity.
	// It exists in this package in order to avoid circular dependency with the "repository" package.
	RepositoryInverseTable = "repositories"
	// RepositoryColumn is the table column denoting the repository relation/edge.
	RepositoryColumn = "repository_artifacts"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "artifacts"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "artifact_children"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "artifacts"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "artifact_children"
)

// Columns holds all SQL columns for artifact fields.
var Columns = []string{
	FieldID,
	FieldDigest,
	FieldMediaType,
	FieldTags,
	FieldArtifactType,
	FieldLastPush,
	FieldLastPull,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "artifacts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"artifact_children",
	"repository_artifacts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DigestValidator is a validator for the "digest" field. It is called by the builders before save.
	DigestValidator func(string) error
	// MediaTypeValidator is a validator for the "mediaType" field. It is called by the builders before save.
	MediaTypeValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() xid.ID
)

// OrderOption defines the ordering options for the Artifact queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDigest orders the results by the digest field.
func ByDigest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDigest, opts...).ToFunc()
}

// ByMediaType orders the results by the mediaType field.
func ByMediaType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMediaType, opts...).ToFunc()
}

// ByArtifactType orders the results by the artifactType field.
func ByArtifactType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtifactType, opts...).ToFunc()
}

// ByLastPush orders the results by the lastPush field.
func ByLastPush(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastPush, opts...).ToFunc()
}

// ByLastPull orders the results by the lastPull field.
func ByLastPull(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastPull, opts...).ToFunc()
}

// ByRepositoryField orders the results by repository field.
func ByRepositoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRepositoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildrenCount orders the results by children count.
func ByChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildrenStep(), opts...)
	}
}

// ByChildren orders the results by children terms.
func ByChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRepositoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RepositoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RepositoryTable, RepositoryColumn),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
	)
}
